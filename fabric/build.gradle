plugins {
    id 'com.github.johnrengelman.shadow'
    id 'me.shedaniel.unified-publishing'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modApi "com.terraformersmc:modmenu:${mod_menu_version}"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    exclude '.cache/**'

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

unifiedPublishing {
    project {
        displayName = "[Fabric ${project.minecraft_version}] Idle Boost ${project.version}"
        version = "${project.version}"
        releaseType = "release"
        gameVersions = ["${project.minecraft_version}"]
        gameLoaders = ["fabric"]
        changelog = project(":").file("changelog.md").text

        mainPublication tasks.remapJar

        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
            optional {
                curseforge = "modmenu"
                modrinth = "modmenu"
            }
        }

        if (curseforgeApiKey != null) {
            curseforge {
                token = curseforgeApiKey
                id = "1054545"
            }
        }

        if (modrinthApiKey != null) {
            modrinth {
                token = modrinthApiKey
                id = "REC6ythZ"
            }
        }
    }
}